{"ast":null,"code":"import { Radar, HorizontalBar, Line, Bar } from \"react-chartjs-2\";\nimport { formatNumberDecimal, formatDateMoment, formatPorcentage } from \"./utils\";\nexport const graphicRadar = \"radar\";\nexport const graphicBar = \"bar\";\nexport const graphicHorizontalBar = \"horizontalBar\";\nexport const graphicLine = \"line\";\nexport const typesGraphic = {\n  [graphicRadar]: Radar,\n  [graphicBar]: Bar,\n  [graphicHorizontalBar]: HorizontalBar,\n  [graphicLine]: Line\n};\nconst GRAPHIC_IDS = {\n  BAR: 1,\n  LINE: 2\n};\nexport const tooltipsGraphic = (graphicId, currency) => {\n  switch (graphicId) {\n    case GRAPHIC_IDS.BAR:\n      {\n        return {\n          title: tooltipItem => tooltipItem[0].yLabel,\n          label: (tooltipItem, data) => \"Ventas \".concat(tooltipItem.xLabel)\n        };\n      }\n\n    case GRAPHIC_IDS.LINE:\n      {\n        return {\n          title: (tooltipItem, data) => {\n            const date = data.labels[tooltipItem[0].index].split(\"|\");\n            return \"Date \".concat(tooltipItem.length > 1 ? data.labels[tooltipItem[0].index] : date[tooltipItem[0].datasetIndex]);\n          },\n          label: (tooltipItem, data) => \"\".concat(data.datasets[tooltipItem.datasetIndex].label, \": \").concat(currency, \" \").concat(formatNumberDecimal(tooltipItem.yLabel)),\n          afterLabel: (tooltipItem, data) => {\n            const dataSetsValues = data.datasets.map(dataSet => parseInt(dataSet.data[tooltipItem.index], 10));\n            const percent = (dataSetsValues.reduce((acum = 0, value) => acum / value) - 1) * 100;\n            return tooltipItem.datasetIndex === data.datasets.length - 1 && !isNaN(percent) && percent !== Infinity ? \"Variaci\\xF3n: \".concat(formatPorcentage(percent.toFixed(1)), \"%\") : null;\n          }\n        };\n      }\n\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const graphicRadarOptions = graphicId => {\n  const optionGraphic = {\n    responsive: true,\n    tooltips: {\n      mode: \"x\",\n      intersect: false,\n      callbacks: tooltipsGraphic(graphicId)\n    },\n    hover: {\n      mode: \"x\",\n      intersect: false\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          callback: value => {\n            const date = value.split(\" | \");\n            return formatDateMoment(date[0], \"DD-MM-YYYY\", \"DD-MM-YY\");\n          }\n        }\n      }]\n    }\n  };\n  return optionGraphic;\n};\nexport const graphicOptionsLine = graphicId => {\n  const optionGraphic = {\n    responsive: true,\n    tooltips: {\n      mode: \"x\",\n      intersect: false,\n      callbacks: tooltipsGraphic(graphicId)\n    },\n    hover: {\n      mode: \"x\",\n      intersect: false\n    }\n  };\n  return optionGraphic;\n};\nexport function optionsForGraphic(type, graphicId, currency) {\n  switch (type) {\n    case graphicRadar:\n      {\n        return graphicRadarOptions(graphicId, currency);\n      }\n\n    case graphicLine:\n      {\n        return graphicOptionsLine(graphicId, currency);\n      }\n\n    default:\n      {\n        return {};\n      }\n  }\n}","map":{"version":3,"sources":["/Users/nlobruno/Documents/Proyects/generic-graphic/src/components/Graphic/constants.js"],"names":["Radar","HorizontalBar","Line","Bar","formatNumberDecimal","formatDateMoment","formatPorcentage","graphicRadar","graphicBar","graphicHorizontalBar","graphicLine","typesGraphic","GRAPHIC_IDS","BAR","LINE","tooltipsGraphic","graphicId","currency","title","tooltipItem","yLabel","label","data","xLabel","date","labels","index","split","length","datasetIndex","datasets","afterLabel","dataSetsValues","map","dataSet","parseInt","percent","reduce","acum","value","isNaN","Infinity","toFixed","graphicRadarOptions","optionGraphic","responsive","tooltips","mode","intersect","callbacks","hover","legend","display","scales","xAxes","ticks","callback","graphicOptionsLine","optionsForGraphic","type"],"mappings":"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","sourcesContent":["import { Radar, HorizontalBar, Line, Bar } from \"react-chartjs-2\";\n\nimport {\n  formatNumberDecimal,\n  formatDateMoment,\n  formatPorcentage\n} from \"./utils\";\n\nexport const graphicRadar = \"radar\";\nexport const graphicBar = \"bar\";\nexport const graphicHorizontalBar = \"horizontalBar\";\nexport const graphicLine = \"line\";\n\nexport const typesGraphic = {\n  [graphicRadar]: Radar,\n  [graphicBar]: Bar,\n  [graphicHorizontalBar]: HorizontalBar,\n  [graphicLine]: Line\n};\n\nconst GRAPHIC_IDS = {\n  BAR: 1,\n  LINE: 2\n};\n\nexport const tooltipsGraphic = (graphicId, currency) => {\n  switch (graphicId) {\n    case GRAPHIC_IDS.BAR: {\n      return {\n        title: tooltipItem => tooltipItem[0].yLabel,\n        label: (tooltipItem, data) => `Ventas ${tooltipItem.xLabel}`\n      };\n    }\n    case GRAPHIC_IDS.LINE: {\n      return {\n        title: (tooltipItem, data) => {\n          const date = data.labels[tooltipItem[0].index].split(\"|\");\n          return `Date ${\n            tooltipItem.length > 1\n              ? data.labels[tooltipItem[0].index]\n              : date[tooltipItem[0].datasetIndex]\n          }`;\n        },\n        label: (tooltipItem, data) =>\n          `${\n            data.datasets[tooltipItem.datasetIndex].label\n          }: ${currency} ${formatNumberDecimal(tooltipItem.yLabel)}`,\n        afterLabel: (tooltipItem, data) => {\n          const dataSetsValues = data.datasets.map(dataSet =>\n            parseInt(dataSet.data[tooltipItem.index], 10)\n          );\n          const percent =\n            (dataSetsValues.reduce((acum = 0, value) => acum / value) - 1) *\n            100;\n          return tooltipItem.datasetIndex === data.datasets.length - 1 &&\n            !isNaN(percent) &&\n            percent !== Infinity\n            ? `VariaciÃ³n: ${formatPorcentage(percent.toFixed(1))}%`\n            : null;\n        }\n      };\n    }\n    default: {\n      return [];\n    }\n  }\n};\n\nexport const graphicRadarOptions = graphicId => {\n  const optionGraphic = {\n    responsive: true,\n    tooltips: {\n      mode: \"x\",\n      intersect: false,\n      callbacks: tooltipsGraphic(graphicId)\n    },\n    hover: {\n      mode: \"x\",\n      intersect: false\n    },\n    legend: { display: false },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            callback: value => {\n              const date = value.split(\" | \");\n              return formatDateMoment(date[0], \"DD-MM-YYYY\", \"DD-MM-YY\");\n            }\n          }\n        }\n      ]\n    }\n  };\n  return optionGraphic;\n};\n\nexport const graphicOptionsLine = graphicId => {\n  const optionGraphic = {\n    responsive: true,\n    tooltips: {\n      mode: \"x\",\n      intersect: false,\n      callbacks: tooltipsGraphic(graphicId)\n    },\n    hover: {\n      mode: \"x\",\n      intersect: false\n    }\n  };\n  return optionGraphic;\n};\n\nexport function optionsForGraphic(type, graphicId, currency) {\n  switch (type) {\n    case graphicRadar: {\n      return graphicRadarOptions(graphicId, currency);\n    }\n    case graphicLine: {\n      return graphicOptionsLine(graphicId, currency);\n    }\n    default: {\n      return {};\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}